Перем ОтчетВыполняется;

#Область ОбработчикиСобытийФормы

Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.ИндикаторПрогресса.Видимость = ОтчетВыполняется = Истина;
	ЭлементыФормы.ИнфоОПроцессе.Видимость = ОтчетВыполняется = Истина;
	
	Если ОтчетВыполняется <> Истина Тогда
		ЭлементыФормы.ИндикаторПрогресса.Значение = 0;
		ЭлементыФормы.ИнфоОПроцессе.Заголовок = "";
	Иначе
		ЭлементыФормы.ИнфоОПроцессе.Заголовок = "Выполняется поиск и вывод данных...";
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	НачПериод = НачалоДня(ТекущаяДата());
	КонПериод = КонецДня(ТекущаяДата());
	
	флВыводитьВсе = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

Процедура флВыводитьВсеПриИзменении(Элемент)
	
	Если флВыводитьВсе Тогда
		флТолькоРасхождения = Ложь;
		флОтметитьРасхождения = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Процедура флТолькоРасхожденияПриИзменении(Элемент)
	флВыводитьВсе = Ложь;
КонецПроцедуры

Процедура ПолеТабличногоДокумента1ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)	
	
КонецПроцедуры

Процедура ПолеТабличногоДокумента1Выбор(Элемент, Область, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура КнопкаСформироватьНажатие(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Поле 'Контрагент' не заполнено.");
		Возврат;
	КонецЕсли; 
	
	Товары.Очистить();
	ЗаполнитьТаблицуТовары();
	
	Если Товары.Количество() = 0 Тогда
		Предупреждение("Данные не найдены!!!");
		Возврат;
	КонецЕсли; 
	
	ОтчетВыполняется = Истина;
	Обновить();
	
	СформироватьОтчет();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСообщенияПоОбратнымЗаказам()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка   
	|ПОМЕСТИТЬ втЗаказы   
	|ИЗ
	|	Документ.ОтгрузкаТоваровУслуг
	|ГДЕ
	|	Контрагент = &Контрагент 
	|	И Дата МЕЖДУ &НачДата И &КонДата
	|	&ДопОтбор;
	|
	|ВЫБРАТЬ
	|	т.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК т
	|  	СОЕДИНЕНИЕ втЗаказы КАК т2
	|  	ПО т.Документ = т2.Ссылка
	|   	И т.ТипСообщения = ""PORDERS"" ;
	|
	|УНИЧТОЖИТЬ втЗаказы;";
	
	Запрос.УстановитьПараметр("НачДата", НачПериод);
	Запрос.УстановитьПараметр("КонДата", КонецДня(КонПериод)); 
	Запрос.УстановитьПараметр("Контрагент", Контрагент); 
	
	ТекстДопОтбора = "";
	Если ЗначениеЗаполнено(Кластер) Тогда
		
		Если ТипЗнч(Кластер) = Тип("СправочникСсылка.Кластеры") Тогда
			ТекстДопОтбора = ТекстДопОтбора + "И Подразделение.Кластер = &Кластер";
		ИначеЕсли ТипЗнч(Кластер) = Тип("СписокЗначений") Тогда	
			ТекстДопОтбора = ТекстДопОтбора + "И Подразделение.Кластер В (&Кластер)";	
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("Кластер", Кластер); 	
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		
		Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
			ТекстДопОтбора = ТекстДопОтбора + "И Ответственный = &Ответственный";
		ИначеЕсли ТипЗнч(Ответственный) = Тип("СписокЗначений") Тогда	
			ТекстДопОтбора = ТекстДопОтбора + "И Ответственный В (&Ответственный)";	
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("Ответственный", Ответственный); 	
		
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопОтбор", ТекстДопОтбора);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	 	
КонецФункции
 
Процедура ЗаполнитьТаблицуТовары()

	СообщенияКонтур = ПолучитьСообщенияПоОбратнымЗаказам();	
	
	Для каждого СтрТаб Из СообщенияКонтур Цикл
		
		Сообщение = СтрТаб.Ссылка.Хранилище.Получить();	
		
		Для каждого СтрокаЗаказа Из Сообщение.Товары Цикл
			
			НовСтр = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаЗаказа);
			
			Коэффициент = СтрокаЗаказа.ЕдиницаИзмерения.Коэффициент;
			
			НовСтр.Документ = СтрТаб.Ссылка.Документ;
			НовСтр.СтруктурнаяЕдиница = СтрТаб.Ссылка.Документ.СтруктурнаяЕдиницаКонтрагента;
			НовСтр.ДатаОтгрузки = СтрТаб.Ссылка.Документ.ДатаОтгрузки;
			НовСтр.Количество = НовСтр.Количество * Коэффициент;
			НовСтр.Цена = СтрокаЗаказа.ЦенаСНДС / Коэффициент;
			
		КонецЦикла; 
		
	КонецЦикла; 

КонецПроцедуры

Процедура ОбработатьПараметрыВывода(ТаблицаДанных, ТаблицаДокументов)
	
	Для каждого Данные  Из ТаблицаДанных Цикл
		
		Если флТолькоРасхождения Тогда
			
			Если (Данные.КоличествоПлан <> Данные.КоличествоФакт
				ИЛИ Данные.ЦенаПлан <> Данные.ЦенаФакт) Тогда
				Данные.РазрешенВывод = Истина;
			Иначе	
				Данные.РазрешенВывод = Ложь;
			КонецЕсли; 
			
		КонецЕсли; 
				
	КонецЦикла; 
	
	// Проставим разрешения на вывод для документов
	Для Каждого СтрТаб Из ТаблицаДокументов Цикл
		
		МассивСтрокСТоваром = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументОтгрузки, РазрешенВывод", СтрТаб.ДокументОтгрузки, Истина));
		СтрТаб.РазрешенВывод = МассивСтрокСТоваром.Количество() > 0;
		
	КонецЦикла; 

КонецПроцедуры

Процедура ПрименитьПараметрыВывода(Данные, ОбластьМакета)
			
	Если флОтметитьРасхождения Тогда
		
		Область_РасхождениеВКоличестве = ОбластьМакета.Область("РасхождениеВКоличестве");
		Область_РасхождениеВЦене = ОбластьМакета.Область("РасхождениеВЦене");
		
		ЦветФонаПоУмолчанию = Область_РасхождениеВКоличестве.ЦветФона;
		
		Если Данные.КоличествоПлан <> Данные.КоличествоФакт Тогда			
			Область_РасхождениеВКоличестве.ЦветФона = WebЦвета.Розовый;
		Иначе
			Область_РасхождениеВКоличестве.ЦветФона = ЦветФонаПоУмолчанию;
		КонецЕсли; 
		
		Если Данные.ЦенаПлан <> Данные.ЦенаФакт Тогда
			Область_РасхождениеВЦене.ЦветФона = WebЦвета.Розовый;
		Иначе
			Область_РасхождениеВЦене.ЦветФона = ЦветФонаПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли; 	

КонецПроцедуры

Процедура СформироватьОтчет()
	
	ТабДокумент = ЭлементыФормы.ТабДокумент;
	ТабДокумент.Очистить();
	
	ТаблицаДанных = ПолучитьТаблицуДанных();
	
	ТаблицаДокументов = ТаблицаДанных.Скопировать(,"ДокументОтгрузки, РазрешенВывод");
	ТаблицаДокументов.Свернуть("ДокументОтгрузки, РазрешенВывод");
	
	ОбработатьПараметрыВывода(ТаблицаДанных, ТаблицаДокументов);
	
	Макет = ПолучитьМакет("Основной");
	Область = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(Область);
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	МаксЗначениеИндикатора = ЭлементыФормы.ИндикаторПрогресса.МаксимальноеЗначение;
	Счетчик = 1;
	Для каждого ВыборкаПоДокументам Из ТаблицаДокументов Цикл
		
		ИндикаторПрогресса = Цел(Счетчик / КоличествоДокументов * МаксЗначениеИндикатора);
		
		Если НЕ ВыборкаПоДокументам.РазрешенВывод Тогда
			Счетчик = Счетчик + 1;
			Продолжить;
		КонецЕсли; 
		
		ТабДокумент.НачатьАвтогруппировкуСтрок();
		
		Область = Макет.ПолучитьОбласть("ГруппировкаПоДокументу");
		Область.Параметры.ДокументОтгрузки = ВыборкаПоДокументам.ДокументОтгрузки;
		ТабДокумент.Вывести(Область, 1, , Истина);
		
		МассивСтрокСТоваром = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументОтгрузки, РазрешенВывод", ВыборкаПоДокументам.ДокументОтгрузки, ВыборкаПоДокументам.РазрешенВывод));
		
		Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		Для Каждого ВыборкаПоТоварам Из МассивСтрокСТоваром цикл 
			
			Если НЕ ВыборкаПоТоварам.РазрешенВывод Тогда
				Продолжить;
			КонецЕсли; 
			
			Область.Параметры.Заполнить(ВыборкаПоТоварам);
			
			ПрименитьПараметрыВывода(ВыборкаПоТоварам, Область);
			
			ТабДокумент.Вывести(Область, 2);
			
		КонецЦикла; 
		
		ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
		Счетчик = Счетчик + 1;
		
	КонецЦикла; 
	
	ТабДокумент.Показать("Обратный заказ. Сравнение заказов и отгрузок.");
	
	ОтчетВыполняется = Неопределено;
	
КонецПроцедуры

#КонецОбласти